[{
  "history_id" : "tF5ctVWoQoau",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "-126.000139 48.999861\n-124.999861 48.999861\n-124.999861 50.000139\n-126.000139 50.000139\n-126.000139 48.999861\n-125.000139 48.999861\n-123.999861 48.999861\n-123.999861 50.000139\n-125.000139 50.000139\n-125.000139 48.999861\n-124.000139 48.999861\n-122.999861 48.999861\n-122.999861 50.000139\n-124.000139 50.000139\n-124.000139 48.999861\n-123.000139 48.999861\n-121.999861 48.999861\n-121.999861 50.000139\n-123.000139 50.000139\n-123.000139 48.999861\n-122.000139 48.999861\n-120.999861 48.999861\n-120.999861 50.000139\n-122.000139 50.000139\n-122.000139 48.999861\n-121.000139 48.999861\n-119.999861 48.999861\n-119.999861 50.000139\n-121.000139 50.000139\n-121.000139 48.999861\n-120.000139 48.999861\n-118.999861 48.999861\n-118.999861 50.000139\n-120.000139 50.000139\n-120.000139 48.999861\n-119.000139 48.999861\n-117.999861 48.999861\n-117.999861 50.000139\n-119.000139 50.000139\n-119.000139 48.999861\n-118.000139 48.999861\n-116.999861 48.999861\n-116.999861 50.000139\n-118.000139 50.000139\n-118.000139 48.999861\n-117.000139 48.999861\n-115.999861 48.999861\n-115.999861 50.000139\n-117.000139 50.000139\n-117.000139 48.999861\n-116.000139 48.999861\n-114.999861 48.999861\n-114.999861 50.000139\n-116.000139 50.000139\n-116.000139 48.999861\n-115.000139 48.999861\n-113.999861 48.999861\n-113.999861 50.000139\n-115.000139 50.000139\n-115.000139 48.999861\n-114.000139 48.999861\n-112.999861 48.999861\n-112.999861 50.000139\n-114.000139 50.000139\n-114.000139 48.999861\n-113.000139 48.999861\n-111.999861 48.999861\n-111.999861 50.000139\n-113.000139 50.000139\n-113.000139 48.999861\n-112.000139 48.999861\n-110.999861 48.999861\n-110.999861 50.000139\n-112.000139 50.000139\n-112.000139 48.999861\n-111.000139 48.999861\n-109.999861 48.999861\n-109.999861 50.000139\n-111.000139 50.000139\n-111.000139 48.999861\n-110.000139 48.999861\n-108.999861 48.999861\n-108.999861 50.000139\n-110.000139 50.000139\n-110.000139 48.999861\n-109.000139 48.999861\n-107.999861 48.999861\n-107.999861 50.000139\n-109.000139 50.000139\n-109.000139 48.999861\n-108.000139 48.999861\n-106.999861 48.999861\n-106.999861 50.000139\n-108.000139 50.000139\n-108.000139 48.999861\n-107.000139 48.999861\n-105.999861 48.999861\n-105.999861 50.000139\n-107.000139 50.000139\n-107.000139 48.999861\n-106.000139 48.999861\n-104.999861 48.999861\n-104.999861 50.000139\n-106.000139 50.000139\n-106.000139 48.999861\n-105.000139 48.999861\n-103.999861 48.999861\n-103.999861 50.000139\n-105.000139 50.000139\n-105.000139 48.999861\n-104.000139 48.999861\n-102.999861 48.999861\n-102.999861 50.000139\n-104.000139 50.000139\n-104.000139 48.999861\n-103.000139 48.999861\n-101.999861 48.999861\n-101.999861 50.000139\n-103.000139 50.000139\n-103.000139 48.999861\n-102.000139 48.999861\n-100.999861 48.999861\n-100.999861 50.000139\n-102.000139 50.000139\n-102.000139 48.999861\n-126.000139 47.999861\n-124.999861 47.999861\n-124.999861 49.000139\n-126.000139 49.000139\n-126.000139 47.999861\n-125.000139 47.999861\n-123.999861 47.999861\n-123.999861 49.000139\n-125.000139 49.000139\n-125.000139 47.999861\n-124.000139 47.999861\n-122.999861 47.999861\n-122.999861 49.000139\n-124.000139 49.000139\n-124.000139 47.999861\n-123.000139 47.999861\n-121.999861 47.999861\n-121.999861 49.000139\n-123.000139 49.000139\n-123.000139 47.999861\n-122.000139 47.999861\n-120.999861 47.999861\n-120.999861 49.000139\n-122.000139 49.000139\n-122.000139 47.999861\n-121.000139 47.999861\n-119.999861 47.999861\n-119.999861 49.000139\n-121.000139 49.000139\n-121.000139 47.999861\n-120.000139 47.999861\n-118.999861 47.999861\n-118.999861 49.000139\n-120.000139 49.000139\n-120.000139 47.999861\n-119.000139 47.999861\n-117.999861 47.999861\n-117.999861 49.000139\n-119.000139 49.000139\n-119.000139 47.999861\n-118.000139 47.999861\n-116.999861 47.999861\n-116.999861 49.000139\n-118.000139 49.000139\n-118.000139 47.999861\n-117.000139 47.999861\n-115.999861 47.999861\n-115.999861 49.000139\n-117.000139 49.000139\n-117.000139 47.999861\n-116.000139 47.999861\n-114.999861 47.999861\n-114.999861 49.000139\n-116.000139 49.000139\n-116.000139 47.999861\n-115.000139 47.999861\n-113.999861 47.999861\n-113.999861 49.000139\n-115.000139 49.000139\n-115.000139 47.999861\n-114.000139 47.999861\n-112.999861 47.999861\n-112.999861 49.000139\n-114.000139 49.000139\n-114.000139 47.999861\n-113.000139 47.999861\n-111.999861 47.999861\n-111.999861 49.000139\n-113.000139 49.000139\n-113.000139 47.999861\n-112.000139 47.999861\n-110.999861 47.999861\n-110.999861 49.000139\n-112.000139 49.000139\n-112.000139 47.999861\n-111.000139 47.999861\n-109.999861 47.999861\n-109.999861 49.000139\n-111.000139 49.000139\n-111.000139 47.999861\n-110.000139 47.999861\n-108.999861 47.999861\n-108.999861 49.000139\n-110.000139 49.000139\n-110.000139 47.999861\n-109.000139 47.999861\n-107.999861 47.999861\n-107.999861 49.000139\n-109.000139 49.000139\n-109.000139 47.999861\n-108.000139 47.999861\n-106.999861 47.999861\n-106.999861 49.000139\n-108.000139 49.000139\n-108.000139 47.999861\n-107.000139 47.999861\n-105.999861 47.999861\n-105.999861 49.000139\n-107.000139 49.000139\n-107.000139 47.999861\n-106.000139 47.999861\n-104.999861 47.999861\n-104.999861 49.000139\n-106.000139 49.000139\n-106.000139 47.999861\n-105.000139 47.999861\n-103.999861 47.999861\n-103.999861 49.000139\n-105.000139 49.000139\n-105.000139 47.999861\n-104.000139 47.999861\n-102.999861 47.999861\n-102.999861 49.000139\n-104.000139 49.000139\n-104.000139 47.999861\n-103.000139 47.999861\n-101.999861 47.999861\n-101.999861 49.000139\n-103.000139 49.000139\n-103.000139 47.999861\n-102.000139 47.999861\n-100.999861 47.999861\n-100.999861 49.000139\n-102.000139 49.000139\n-102.000139 47.999861\n-125.000139 46.999861\n-123.999861 46.999861\n-123.999861 48.000139\n-125.000139 48.000139\n-125.000139 46.999861\n-124.000139 46.999861\n-122.999861 46.999861\n-122.999861 48.000139\n-124.000139 48.000139\n-124.000139 46.999861\n-123.000139 46.999861\n-121.999861 46.999861\n-121.999861 48.000139\n-123.000139 48.000139\n-123.000139 46.999861\n-122.000139 46.999861\n-120.999861 46.999861\n-120.999861 48.000139\n-122.000139 48.000139\n-122.000139 46.999861\n-121.000139 46.999861\n-119.999861 46.999861\n-119.999861 48.000139\n-121.000139 48.000139\n-121.000139 46.999861\n-120.000139 46.999861\n-118.999861 46.999861\n-118.999861 48.000139\n-120.000139 48.000139\n-120.000139 46.999861\n-119.000139 46.999861\n-117.999861 46.999861\n-117.999861 48.000139\n-119.000139 48.000139\n-119.000139 46.999861\n-118.000139 46.999861\n-116.999861 46.999861\n-116.999861 48.000139\n-118.000139 48.000139\n-118.000139 46.999861\n-117.000139 46.999861\n-115.999861 46.999861\n-115.999861 48.000139\n-117.000139 48.000139\n-117.000139 46.999861\n-116.000139 46.999861\n-114.999861 46.999861\n-114.999861 48.000139\n-116.000139 48.000139\n-116.000139 46.999861\n-115.000139 46.999861\n-113.999861 46.999861\n-113.999861 48.000139\n-115.000139 48.000139\n-115.000139 46.999861\n-114.000139 46.999861\n-112.999861 46.999861\n-112.999861 48.000139\n-114.000139 48.000139\n-114.000139 46.999861\n-113.000139 46.999861\n-111.999861 46.999861\n-111.999861 48.000139\n-113.000139 48.000139\n-113.000139 46.999861\n-112.000139 46.999861\n-110.999861 46.999861\n-110.999861 48.000139\n-112.000139 48.000139\n-112.000139 46.999861\n-111.000139 46.999861\n-109.999861 46.999861\n-109.999861 48.000139\n-111.000139 48.000139\n-111.000139 46.999861\n-110.000139 46.999861\n-108.999861 46.999861\n-108.999861 48.000139\n-110.000139 48.000139\n-110.000139 46.999861\n-109.000139 46.999861\n-107.999861 46.999861\n-107.999861 48.000139\n-109.000139 48.000139\n-109.000139 46.999861\n-108.000139 46.999861\n-106.999861 46.999861\n-106.999861 48.000139\n-108.000139 48.000139\n-108.000139 46.999861\n-107.000139 46.999861\n-105.999861 46.999861\n-105.999861 48.000139\n-107.000139 48.000139\n-107.000139 46.999861\n-106.000139 46.999861\n-104.999861 46.999861\n-104.999861 48.000139\n-106.000139 48.000139\n-106.000139 46.999861\n-105.000139 46.999861\n-103.999861 46.999861\n-103.999861 48.000139\n-105.000139 48.000139\n-105.000139 46.999861\n-104.000139 46.999861\n-102.999861 46.999861\n-102.999861 48.000139\n-104.000139 48.000139\n-104.000139 46.999861\n-103.000139 46.999861\n-101.999861 46.999861\n-101.999861 48.000139\n-103.000139 48.000139\n-103.000139 46.999861\n-102.000139 46.999861\n-100.999861 46.999861\n-100.999861 48.000139\n-102.000139 48.000139\n-102.000139 46.999861\n-125.000139 45.999861\n-123.999861 45.999861\n-123.999861 47.000139\n-125.000139 47.000139\n-125.000139 45.999861\n-124.000139 45.999861\n-122.999861 45.999861\n-122.999861 47.000139\n-124.000139 47.000139\n-124.000139 45.999861\n-123.000139 45.999861\n-121.999861 45.999861\n-121.999861 47.000139\n-123.000139 47.000139\n-123.000139 45.999861\n-122.000139 45.999861\n-120.999861 45.999861\n-120.999861 47.000139\n-122.000139 47.000139\n-122.000139 45.999861\n-121.000139 45.999861\n-119.999861 45.999861\n-119.999861 47.000139\n-121.000139 47.000139\n-121.000139 45.999861\n-120.000139 45.999861\n-118.999861 45.999861\n-118.999861 47.000139\n-120.000139 47.000139\n-120.000139 45.999861\n-119.000139 45.999861\n-117.999861 45.999861\n-117.999861 47.000139\n-119.000139 47.000139\n-119.000139 45.999861\n-118.000139 45.999861\n-116.999861 45.999861\n-116.999861 47.000139\n-118.000139 47.000139\n-118.000139 45.999861\n-117.000139 45.999861\n-115.999861 45.999861\n-115.999861 47.000139\n-117.000139 47.000139\n-117.000139 45.999861\n-116.000139 45.999861\n-114.999861 45.999861\n-114.999861 47.000139\n-116.000139 47.000139\n-116.000139 45.999861\n-115.000139 45.999861\n-113.999861 45.999861\n-113.999861 47.000139\n-115.000139 47.000139\n-115.000139 45.999861\n-114.000139 45.999861\n-112.999861 45.999861\n-112.999861 47.000139\n-114.000139 47.000139\n-114.000139 45.999861\n-113.000139 45.999861\n-111.999861 45.999861\n-111.999861 47.000139\n-113.000139 47.000139\n-113.000139 45.999861\n-112.000139 45.999861\n-110.999861 45.999861\n-110.999861 47.000139\n-112.000139 47.000139\n-112.000139 45.999861\n-111.000139 45.999861\n-109.999861 45.999861\n-109.999861 47.000139\n-111.000139 47.000139\n-111.000139 45.999861\n-110.000139 45.999861\n-108.999861 45.999861\n-108.999861 47.000139\n-110.000139 47.000139\n-110.000139 45.999861\n-109.000139 45.999861\n-107.999861 45.999861\n-107.999861 47.000139\n-109.000139 47.000139\n-109.000139 45.999861\n-108.000139 45.999861\n-106.999861 45.999861\n-106.999861 47.000139\n-108.000139 47.000139\n-108.000139 45.999861\n-107.000139 45.999861\n-105.999861 45.999861\n-105.999861 47.000139\n-107.000139 47.000139\n-107.000139 45.999861\n-106.000139 45.999861\n-104.999861 45.999861\n-104.999861 47.000139\n-106.000139 47.000139\n-106.000139 45.999861\n-105.000139 45.999861\n-103.999861 45.999861\n-103.999861 47.000139\n-105.000139 47.000139\n-105.000139 45.999861\n-104.000139 45.999861\n-102.999861 45.999861\n-102.999861 47.000139\n-104.000139 47.000139\n-104.000139 45.999861\n-103.000139 45.999861\n-101.999861 45.999861\n-101.999861 47.000139\n-103.000139 47.000139\n-103.000139 45.999861\n-102.000139 45.999861\n-100.999861 45.999861\n-100.999861 47.000139\n-102.000139 47.000139\n-102.000139 45.999861\n-125.000139 44.999861\n-123.999861 44.999861\n-123.999861 46.000139\n-125.000139 46.000139\n-125.000139 44.999861\n-124.000139 44.999861\n-122.999861 44.999861\n-122.999861 46.000139\n-124.000139 46.000139\n-124.000139 44.999861\n-123.000139 44.999861\n-121.999861 44.999861\n-121.999861 46.000139\n-123.000139 46.000139\n-123.000139 44.999861\n-122.000139 44.999861\n-120.999861 44.999861\n-120.999861 46.000139\n-122.000139 46.000139\n-122.000139 44.999861\n-121.000139 44.999861\n-119.999861 44.999861\n-119.999861 46.000139\n-121.000139 46.000139\n-121.000139 44.999861\n-120.000139 44.999861\n-118.999861 44.999861\n-118.999861 46.000139\n-120.000139 46.000139\n-120.000139 44.999861\n-119.000139 44.999861\n-117.999861 44.999861\n-117.999861 46.000139\n-119.000139 46.000139\n-119.000139 44.999861\n-118.000139 44.999861\n-116.999861 44.999861\n-116.999861 46.000139\n-118.000139 46.000139\n-118.000139 44.999861\n-117.000139 44.999861\n-115.999861 44.999861\n-115.999861 46.000139\n-117.000139 46.000139\n-117.000139 44.999861\n-116.000139 44.999861\n-114.999861 44.999861\n-114.999861 46.000139\n-116.000139 46.000139\n-116.000139 44.999861\n-115.000139 44.999861\n-113.999861 44.999861\n-113.999861 46.000139\n-115.000139 46.000139\n-115.000139 44.999861\n-114.000139 44.999861\n-112.999861 44.999861\n-112.999861 46.000139\n-114.000139 46.000139\n-114.000139 44.999861\n-113.000139 44.999861\n-111.999861 44.999861\n-111.999861 46.000139\n-113.000139 46.000139\n-113.000139 44.999861\n-112.000139 44.999861\n-110.999861 44.999861\n-110.999861 46.000139\n-112.000139 46.000139\n-112.000139 44.999861\n-111.000139 44.999861\n-109.999861 44.999861\n-109.999861 46.000139\n-111.000139 46.000139\n-111.000139 44.999861\n-110.000139 44.999861\n-108.999861 44.999861\n-108.999861 46.000139\n-110.000139 46.000139\n-110.000139 44.999861\n-109.000139 44.999861\n-107.999861 44.999861\n-107.999861 46.000139\n-109.000139 46.000139\n-109.000139 44.999861\n-108.000139 44.999861\n-106.999861 44.999861\n-106.999861 46.000139\n-108.000139 46.000139\n-108.000139 44.999861\n-107.000139 44.999861\n-105.999861 44.999861\n-105.999861 46.000139\n-107.000139 46.000139\n-107.000139 44.999861\n-106.000139 44.999861\n-104.999861 44.999861\n-104.999861 46.000139\n-106.000139 46.000139\n-106.000139 44.999861\n-105.000139 44.999861\n-103.999861 44.999861\n-103.999861 46.000139\n-105.000139 46.000139\n-105.000139 44.999861\n-104.000139 44.999861\n-102.999861 44.999861\n-102.999861 46.000139\n-104.000139 46.000139\n-104.000139 44.999861\n-103.000139 44.999861\n-101.999861 44.999861\n-101.999861 46.000139\n-103.000139 46.000139\n-103.000139 44.999861\n-102.000139 44.999861\n-100.999861 44.999861\n-100.999861 46.000139\n-102.000139 46.000139\n-102.000139 44.999861\n-125.000139 43.999861\n-123.999861 43.999861\n-123.999861 45.000139\n-125.000139 45.000139\n-125.000139 43.999861\n-124.000139 43.999861\n-122.999861 43.999861\n-122.999861 45.000139\n-124.000139 45.000139\n-124.000139 43.999861\n-123.000139 43.999861\n-121.999861 43.999861\n-121.999861 45.000139\n-123.000139 45.000139\n-123.000139 43.999861\n-122.000139 43.999861\n-120.999861 43.999861\n-120.999861 45.000139\n-122.000139 45.000139\n-122.000139 43.999861\n-121.000139 43.999861\n-119.999861 43.999861\n-119.999861 45.000139\n-121.000139 45.000139\n-121.000139 43.999861\n-120.000139 43.999861\n-118.999861 43.999861\n-118.999861 45.000139\n-120.000139 45.000139\n-120.000139 43.999861\n-119.000139 43.999861\n-117.999861 43.999861\n-117.999861 45.000139\n-119.000139 45.000139\n-119.000139 43.999861\n-118.000139 43.999861\n-116.999861 43.999861\n-116.999861 45.000139\n-118.000139 45.000139\n-118.000139 43.999861\n-117.000139 43.999861\n-115.999861 43.999861\n-115.999861 45.000139\n-117.000139 45.000139\n-117.000139 43.999861\n-116.000139 43.999861\n-114.999861 43.999861\n-114.999861 45.000139\n-116.000139 45.000139\n-116.000139 43.999861\n-115.000139 43.999861\n-113.999861 43.999861\n-113.999861 45.000139\n-115.000139 45.000139\n-115.000139 43.999861\n-114.000139 43.999861\n-112.999861 43.999861\n-112.999861 45.000139\n-114.000139 45.000139\n-114.000139 43.999861\n-113.000139 43.999861\n-111.999861 43.999861\n-111.999861 45.000139\n-113.000139 45.000139\n-113.000139 43.999861\n-112.000139 43.999861\n-110.999861 43.999861\n-110.999861 45.000139\n-112.000139 45.000139\n-112.000139 43.999861\n-111.000139 43.999861\n-109.999861 43.999861\n-109.999861 45.000139\n-111.000139 45.000139\n-111.000139 43.999861\n-110.000139 43.999861\n-108.999861 43.999861\n-108.999861 45.000139\n-110.000139 45.000139\n-110.000139 43.999861\n-109.000139 43.999861\n-107.999861 43.999861\n-107.999861 45.000139\n-109.000139 45.000139\n-109.000139 43.999861\n-108.000139 43.999861\n-106.999861 43.999861\n-106.999861 45.000139\n-108.000139 45.000139\n-108.000139 43.999861\n",
  "history_begin_time" : 1683453250870,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "Bm80Tq3IQBJx",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "usage: conda [-h] [-V] command ...\nconda: error: argument command: invalid choice: 'data_terrain_imagery.py' (choose from 'clean', 'compare', 'config', 'create', 'info', 'init', 'install', 'list', 'package', 'remove', 'uninstall', 'rename', 'run', 'search', 'update', 'upgrade', 'notices')\n",
  "history_begin_time" : 1683453181650,
  "history_end_time" : 1683453183591,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "0YyPJL22fPus",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"data_terrain_imagery.py\", line 16, in <module>\n    from shapely.wkt import loads\nModuleNotFoundError: No module named 'shapely'\n",
  "history_begin_time" : 1683453133109,
  "history_end_time" : 1683453139413,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "mjrnFpE0hJoN",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "/home/chetana/anaconda3/lib/python3.9/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/mjrnFpE0hJoN/data_terrain_imagery.py\", line 11, in <module>\n    import xrspatial\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/__init__.py\", line 3, in <module>\n    from xrspatial.aspect import aspect  # noqa\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/aspect.py\", line 8, in <module>\n    from numba import cuda\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 200, in <module>\n    _ensure_critical_deps()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 140, in _ensure_critical_deps\n    raise ImportError(\"Numba needs NumPy 1.21 or less\")\nImportError: Numba needs NumPy 1.21 or less\n",
  "history_begin_time" : 1683453054756,
  "history_end_time" : 1683453058110,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "GKlIenlFvp3J",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "sh: /home/chetana/anaconda3/conda/bin/python: No such file or directory\n",
  "history_begin_time" : 1683452997524,
  "history_end_time" : 1683452998686,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "GkIwN8m5txO7",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "sh: /home/chetana/anaconda3/condabin/python: No such file or directory\n",
  "history_begin_time" : 1683452964809,
  "history_end_time" : 1683452965911,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "oz9YsBnmCcG4",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "/home/chetana/anaconda3/lib/python3.9/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/oz9YsBnmCcG4/data_terrain_imagery.py\", line 11, in <module>\n    import xrspatial\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/__init__.py\", line 3, in <module>\n    from xrspatial.aspect import aspect  # noqa\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/aspect.py\", line 8, in <module>\n    from numba import cuda\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 200, in <module>\n    _ensure_critical_deps()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 140, in _ensure_critical_deps\n    raise ImportError(\"Numba needs NumPy 1.21 or less\")\nImportError: Numba needs NumPy 1.21 or less\n",
  "history_begin_time" : 1683451695250,
  "history_end_time" : 1683451698624,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Z8h4K3LgjK8E",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "/home/chetana/anaconda3/lib/python3.9/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/Z8h4K3LgjK8E/data_terrain_imagery.py\", line 11, in <module>\n    import xrspatial\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/__init__.py\", line 3, in <module>\n    from xrspatial.aspect import aspect  # noqa\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/aspect.py\", line 8, in <module>\n    from numba import cuda\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 200, in <module>\n    _ensure_critical_deps()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 140, in _ensure_critical_deps\n    raise ImportError(\"Numba needs NumPy 1.21 or less\")\nImportError: Numba needs NumPy 1.21 or less\n",
  "history_begin_time" : 1683451653851,
  "history_end_time" : 1683451657147,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "yPifho2SRlYA",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "/home/chetana/anaconda3/lib/python3.9/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/yPifho2SRlYA/data_terrain_imagery.py\", line 11, in <module>\n    import xrspatial\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/__init__.py\", line 3, in <module>\n    from xrspatial.aspect import aspect  # noqa\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/aspect.py\", line 8, in <module>\n    from numba import cuda\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 200, in <module>\n    _ensure_critical_deps()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 140, in _ensure_critical_deps\n    raise ImportError(\"Numba needs NumPy 1.21 or less\")\nImportError: Numba needs NumPy 1.21 or less\n",
  "history_begin_time" : 1683451577121,
  "history_end_time" : 1683451580553,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "8q9ulq1u3vvl",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "/home/chetana/anaconda3/lib/python3.9/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/8q9ulq1u3vvl/data_terrain_imagery.py\", line 11, in <module>\n    import xrspatial\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/__init__.py\", line 3, in <module>\n    from xrspatial.aspect import aspect  # noqa\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/aspect.py\", line 8, in <module>\n    from numba import cuda\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 200, in <module>\n    _ensure_critical_deps()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 140, in _ensure_critical_deps\n    raise ImportError(\"Numba needs NumPy 1.21 or less\")\nImportError: Numba needs NumPy 1.21 or less\n",
  "history_begin_time" : 1683451477681,
  "history_end_time" : 1683451481215,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "rEkN1yN79Qve",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "/home/chetana/anaconda3/lib/python3.9/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/rEkN1yN79Qve/data_terrain_imagery.py\", line 11, in <module>\n    import xrspatial\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/__init__.py\", line 3, in <module>\n    from xrspatial.aspect import aspect  # noqa\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/aspect.py\", line 8, in <module>\n    from numba import cuda\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 200, in <module>\n    _ensure_critical_deps()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 140, in _ensure_critical_deps\n    raise ImportError(\"Numba needs NumPy 1.21 or less\")\nImportError: Numba needs NumPy 1.21 or less\n",
  "history_begin_time" : 1683451462799,
  "history_end_time" : 1683451466173,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "swZpvTlw9kK8",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "/home/chetana/anaconda3/lib/python3.9/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/swZpvTlw9kK8/data_terrain_imagery.py\", line 11, in <module>\n    import xrspatial\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/__init__.py\", line 3, in <module>\n    from xrspatial.aspect import aspect  # noqa\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/aspect.py\", line 8, in <module>\n    from numba import cuda\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 200, in <module>\n    _ensure_critical_deps()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 140, in _ensure_critical_deps\n    raise ImportError(\"Numba needs NumPy 1.21 or less\")\nImportError: Numba needs NumPy 1.21 or less\n",
  "history_begin_time" : 1683451424945,
  "history_end_time" : 1683451428451,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "WDl6K2zENIyE",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "/home/chetana/anaconda3/lib/python3.9/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/WDl6K2zENIyE/data_terrain_imagery.py\", line 11, in <module>\n    import xrspatial\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/__init__.py\", line 3, in <module>\n    from xrspatial.aspect import aspect  # noqa\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/aspect.py\", line 8, in <module>\n    from numba import cuda\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 200, in <module>\n    _ensure_critical_deps()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 140, in _ensure_critical_deps\n    raise ImportError(\"Numba needs NumPy 1.21 or less\")\nImportError: Numba needs NumPy 1.21 or less\n",
  "history_begin_time" : 1683450391021,
  "history_end_time" : 1683450394470,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "uzdwP9oINc7M",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "/home/chetana/anaconda3/lib/python3.9/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/uzdwP9oINc7M/data_terrain_imagery.py\", line 11, in <module>\n    import xrspatial\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/__init__.py\", line 3, in <module>\n    from xrspatial.aspect import aspect  # noqa\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/aspect.py\", line 8, in <module>\n    from numba import cuda\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 200, in <module>\n    _ensure_critical_deps()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 140, in _ensure_critical_deps\n    raise ImportError(\"Numba needs NumPy 1.21 or less\")\nImportError: Numba needs NumPy 1.21 or less\n",
  "history_begin_time" : 1683449961508,
  "history_end_time" : 1683449964843,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "o2N3kgGWfrS5",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\n!pip3 install numpy==1.21\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "  File \"/home/chetana/gw-workspace/o2N3kgGWfrS5/data_terrain_imagery.py\", line 9\n    !pip3 install numpy==1.21\n    ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1683449946531,
  "history_end_time" : 1683449947764,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "72NMJ4rJlqj7",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\n# from azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_downloaded_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "/home/chetana/anaconda3/lib/python3.9/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/72NMJ4rJlqj7/data_terrain_imagery.py\", line 11, in <module>\n    import xrspatial\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/__init__.py\", line 3, in <module>\n    from xrspatial.aspect import aspect  # noqa\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/xrspatial/aspect.py\", line 8, in <module>\n    from numba import cuda\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 200, in <module>\n    _ensure_critical_deps()\n  File \"/home/chetana/anaconda3/lib/python3.9/site-packages/numba/__init__.py\", line 140, in _ensure_critical_deps\n    raise ImportError(\"Numba needs NumPy 1.21 or less\")\nImportError: Numba needs NumPy 1.21 or less\n",
  "history_begin_time" : 1683449873395,
  "history_end_time" : 1683449897822,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "KULuu2PIkpBe",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\nfrom azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/KULuu2PIkpBe/data_terrain_imagery.py\", line 7, in <module>\n    from azureml.opendatasets import SrtmDownloader\nModuleNotFoundError: No module named 'azureml'\n",
  "history_begin_time" : 1683449846719,
  "history_end_time" : 1683449847832,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "RxQWUkKO1JdX",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\nfrom azureml.opendatasets import SrtmDownloader\n\nimport csv\nimport rioxarray\nimport xrspatial\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nfrom shapely.wkt import loads\nfrom shapely.geometry import Polygon\n\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# select western US as our area of interest\nbbox = [-125.0, 31.0, -102.0, 49.0]\n\narea_of_interest = {\"type\": \"Polygon\", \"coordinates\": [[\n    [bbox[0], bbox[1]],\n    [bbox[2], bbox[1]],\n    [bbox[2], bbox[3]],\n    [bbox[0], bbox[3]],\n    [bbox[0], bbox[1]],\n]]}\n\nsearch = catalog.search(collections=[\"nasadem\"], intersects=area_of_interest)\nwestern_us = search.item_collection()\n\nterrian_file = open('/home/chetana/terrian_data/terrian_features.csv', 'w+')\n\nfor tile in western_us:\n    writer = csv.DictWriter(terrian_file, fieldnames=['tile_id', 'lat', 'long', 'northness_30', 'northness_1000',\n                                                      'curvature_30', 'curvature_1000', 'slope_30', 'slope_1000',\n                                                      'elevation_30', 'elevation_1000'])\n    writer.writeheader()\n    coordinates = tile.bbox\n    polygon = str(Polygon([(coordinates[0], coordinates[1]),\n                       (coordinates[2], coordinates[1]),\n                       (coordinates[2], coordinates[3]),\n                       (coordinates[0], coordinates[3])]))\n    polygon = loads(polygon)\n    lat_long = list(polygon.exterior.coords)\n    da = rioxarray.open_rasterio(tile.assets[\"elevation\"].href, variable=\"elevation\").isel(band=0)\n    aspect = xrspatial.aspect(da)\n    aspect_30 = aspect.where((da > (30 - 15)) & (da < (30 + 15)), drop=True)\n    aspect_1000 = aspect.where((da > (1000 - 15) & (1000 + 15)), drop=True)\n    aspect_30_mean = aspect_30.mean()\n    aspect_1000_mean = aspect_1000.mean()\n\n    aspect_30 = aspect_30_mean.values  ##\n    aspect_1000 = aspect_1000_mean.values  ##\n\n    elevation_30_calc = da.where((aspect_30 > 15) & (aspect_30 < 45))\n    elevation_1000_calc = da.where((aspect_1000 > 1000 - 15) & (aspect_1000 < 1000 + 15))\n    elevation_30 = elevation_30_calc.mean().values\n    elevation_1000 = elevation_1000_calc.mean().values\n\n    curvature_30_calc = xrspatial.curvature(da.where((aspect > 30 - 15) & (aspect < 30 + 15)))\n    curvature_30_filter = xr.where((aspect > 30 - 15) & (aspect < 30 + 15), curvature_30_calc, np.nan)\n\n    curvature_1000_calc = xrspatial.curvature(da.where((aspect > 1000 - 15) & (aspect < 1000 + 15)))\n    curvature_1000_filter = xr.where((aspect > 1000 - 15) & (aspect < 1000 + 15), curvature_1000_calc, np.nan)\n\n    curvature_30 = curvature_30_filter.mean().values\n    curvature_1000 = curvature_1000_filter.mean().values\n\n    slope_30_calc = xrspatial.slope(da, 30)\n    slope_1000_calc = xrspatial.slope(da, 1000)\n\n    slope_30 = slope_30_calc.mean().item()\n    slope_1000 = slope_1000_calc.mean().item()\n\n    northness_30_calc = xrspatial.aspect(slope_30_calc)\n    northness_1000_calc = xrspatial.aspect(slope_1000_calc)\n\n    northness_30 = northness_30_calc.mean().item()\n    northness_1000 = northness_1000_calc.mean().item()\n\n    for l in lat_long:\n        print(l[0], l[1])\n        row = {'tile_id': tile.id, 'lat': l[1], 'long': l[0], 'northness_30': northness_30, 'northness_1000': northness_1000,\n               'curvature_30': curvature_30, 'curvature_1000': curvature_1000, 'slope_30': slope_30,\n               'slope_1000': slope_1000, 'elevation_30': elevation_30, 'elevation_1000': elevation_1000}\n        writer.writerow(row)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/RxQWUkKO1JdX/data_terrain_imagery.py\", line 7, in <module>\n    from azureml.opendatasets import SrtmDownloader\nModuleNotFoundError: No module named 'azureml'\n",
  "history_begin_time" : 1683449633723,
  "history_end_time" : 1683449635363,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "JEYwUwzhNTIZ",
  "history_input" : "# download the terrain imagery for western U.S. and read values from them\n# north west tile: N48W126\n# north east tile: N49W099\n# south west tile: N26W115\n# south east tile: N26W098\n\nfrom azureml.opendatasets import SrtmDownloader\n\ndem_download_dir = \"/home/chetana/terrian_data/\"\ndem_downloaded_dir_new = '/home/chetana/terrian_data_downloaded/'\n\ndef download_terrian_data():\n  north = 49\n  south = 31\n  west = -124\n  east = -104\n  \n  downloader = SrtmDownloader()\n  downloader.download(bounds=(north, west, south, east), output_folder=dem_downloaded_dir_new)\n\ndef step_one_merge_western_us():\n  \"\"\"\n  find all the western us tiles and merge them into one big geotiff\n  \"\"\"\n  vrt_western_us_dir = \"/home/chetana/terrian_data/vrt/\"\n\ndef step_two_calculate_terrain_features():\n  \"\"\"\n  Use the big geotiff file to calculate the aspect, curvation, slope, eastness, northness for every location of the continent\n  \"\"\"\n  pass\n\n\nstep_one_merge_western_us()\nstep_two_calculate_terrain_features()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/JEYwUwzhNTIZ/data_terrain_imagery.py\", line 7, in <module>\n    from azureml.opendatasets import SrtmDownloader\nModuleNotFoundError: No module named 'azureml'\n",
  "history_begin_time" : 1683009416818,
  "history_end_time" : 1683009417901,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "u454gbzvdpz",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1682984800298,
  "history_notes" : null,
  "history_process" : "drd3i0",
  "host_id" : "jf7wuu",
  "indicator" : "Stopped"
},]
